package com.javacodegeeks.drools;

import com.javacodegeeks.drools.Util;

rule "Class Transitiveness Inference"
when
    $clazz: Clazz( parent != null , parent.parent != null  ) 
    not ( exists(  Clazz( name==$clazz.name , parent == $clazz.parent.parent ) ) )
then
    System.out.println( "Class Transitiveness --> New Class has to be created with name: "+ $clazz.getName() +" and parent: "+$clazz.getParent().getParent().getName() );
    Clazz newclazz = new Clazz($clazz.getName(),$clazz.getParent().getParent());
    insert(newclazz);
end

rule "Supertype Inheritance Inference"
when

    $instance: InstanceOfClazz( clazz.parent !=null   ) 
    not ( exists(  InstanceOfClazz( name==$instance.name , clazz == clazz.parent ) ) )
then
    System.out.println( "Supertype Inheritance --> New InstanceOfClass has to be created with name: "+ $instance.getName() +" and class: "+$instance.getClazz().getParent().getName() );
    InstanceOfClazz newinstanceofclazz = new InstanceOfClazz($instance.getName(),$instance.getClazz().getParent());
    insert(newinstanceofclazz);
end



rule "Consistency Checking of Knowledge Triples based on Domain Restrictions"
when
    $triple: KnowledgeTriple() 
    not ( exists(  InstanceOfClazz( name == $triple.subject.name , clazz == $triple.predicate.domain ) ) )
then
    System.out.println( "Modelling Error! Invalid Triple: " + $triple );
    retract($triple);
end

rule "Consistency Checking of Knowledge Triples based on Range Restrictions"
when
    $triple: KnowledgeTriple() 
    not ( exists(  InstanceOfClazz( name == $triple.object.name  , clazz == $triple.predicate.range  ) ) )
then
    System.out.println( "Modelling Error! Invalid Triple: " + $triple );
    retract($triple);
end


rule "Consistency Checking of Sub-Property Definition based on Domain Restrictions"
when
    $op: ObjectProperty( parent != null ) 
    eval ( Util.isClassSubclassOfClass($op.getDomain(), $op.getParent().getDomain() ) == false )
then
    System.out.println( "Modelling Error! Invalid Object Sub-Property based on Domain Restrictions: " + $op );
    retract($op);
end

rule "Consistency Checking of Sub-Property Definition based on Range Restrictions"
when
    $op: ObjectProperty( parent != null ) 
    eval ( Util.isClassSubclassOfClass($op.getRange(), $op.getParent().getRange() ) == false )
then
    System.out.println( "Modelling Error! Invalid Object Sub-Property based on Range Restrictions: " + $op );
    retract($op);
end


rule "Knowledge Expansion through Range Generalization (make use of Supertype inheritance)"
when
    $triple: KnowledgeTriple() 
    $objectinstance: InstanceOfClazz(name == $triple.object.name, clazz != $triple.object.clazz )
    not ( 
        exists(      
            $newtriple: KnowledgeTriple( predicate == $triple.predicate , subject == $triple.subject, object.name == $triple.object.name , object.clazz != $triple.object.clazz  ) 
        ) 
    )
then
    System.out.println( "Knowledge Expansion through Range Generalization  --> New Triple has to be created Predicate:"+$triple.getPredicate().getName()+" Subject: "+$triple.getSubject().getName() +"( "+$triple.getSubject().getClazz().getName()+" )"+" Object: "+$objectinstance.getName() + " ( "+$objectinstance.getClazz().getName()+" )" );
    KnowledgeTriple newtriple = new KnowledgeTriple( $triple.getSubject() , $triple.getPredicate() , $objectinstance );
    insert(newtriple);
end


rule "Knowledge Expansion through Domain Generalization (make use of Supertype inheritance)"
when
    $triple: KnowledgeTriple() 
    $subjectinstance: InstanceOfClazz(name == $triple.subject.name, clazz != $triple.subject.clazz )
    not ( 
        exists(      
            $newtriple: KnowledgeTriple( predicate == $triple.predicate , object == $triple.object, subject.name == $triple.subject.name , subject.clazz != $triple.subject.clazz  ) 
        ) 
    )
then
    System.out.println( "Knowledge Expansion through Domain Generalization --> New Triple has to be created Predicate:"+$triple.getPredicate().getName()+" Subject: "+$subjectinstance.getName() +"("+$subjectinstance.getClazz().getName()+")"+" Object: "+$triple.getObject().getName() +"("+$triple.getObject().getClazz().getName()+")" );
    KnowledgeTriple newtriple = new KnowledgeTriple( $subjectinstance , $triple.getPredicate() , $triple.getObject() );
    insert(newtriple);
end


rule "Knowledge Expansion through Transitive Property Interpretation"
when
    $pred: ObjectProperty(transitive == true )
    $triple1: KnowledgeTriple( predicate == $pred , $subject1: subject , $object1: object ) 
    $triple2: KnowledgeTriple( predicate == $pred , subject == $object1) 

    not ( 
        exists(      
            KnowledgeTriple( predicate == $pred , subject == $triple1.subject, object == $triple2.object  ) 
        ) 
    )
then
    System.out.println( "Knowledge Expansion through Transitive Property   --> New Triple has to be created Predicate:"+$pred.getName()+" Subject: "+$triple1.getSubject().getName()+"("+$triple1.getSubject().getClazz().getName()+") Object: "+$triple2.getObject().getName()+"("+$triple2.getObject().getClazz().getName()+")" );
    KnowledgeTriple newtriple = new KnowledgeTriple( $triple1.getSubject() , $pred , $triple2.getObject() );
    insert(newtriple);
end


rule "Knowledge Expansion through Sub-Property Generalization"
when
    $pred: ObjectProperty( parent != null )
    $triple: KnowledgeTriple( predicate == $pred , $subject1: subject , $object1: object ) 

    not ( 
        exists(      
            KnowledgeTriple( predicate == $pred.parent , subject == $triple.subject, object == $triple.object  ) 
        ) 
    )
then
    System.out.println( "Knowledge Expansion through Sub-Property Generalization --> New Triple has to be created Predicate:"+$pred.getParent().getName()+" Subject: "+$triple.getSubject().getName()+"("+$triple.getSubject().getClazz().getName()+") Object: "+$triple.getObject().getName()+"("+$triple.getObject().getClazz().getName()+")" );
    KnowledgeTriple newtriple = new KnowledgeTriple( $triple.getSubject() , $pred.getParent() , $triple.getObject() );
    insert(newtriple);
end

//////////////  PaaSword Rules   /////////////////////////
rule "PaaSword Rule 1"
// if timestamp > 5 &&
// if request.employee == Panagiotis Gouvas

when    
    //fetch phase
    $req: InstanceOfClazz( name == 'request1')
    $pred1: ObjectProperty( name == 'Request_hasTimestamp_Timestamp' )
    $tr1: KnowledgeTriple( subject == $req , predicate == $pred1 , $object1: object)   //Instance of Timestamp
    $pred2: ObjectProperty( name == 'Request_comesFrom_Employee' )
    $tr2: KnowledgeTriple( subject == $req , predicate == $pred2 , $object2: object)   //Instance of Employee
    $pred3: ObjectProperty( name == 'Request_hasIP_IPAddress' )
    $tr3: KnowledgeTriple( subject == $req , predicate == $pred3 , $object3: object)   //Instance of IP 
    $pred4: ObjectProperty( name == 'IPAddress_hasStatus_Classificationstatus' )
    $tr4: KnowledgeTriple( subject == $object3 , predicate == $pred4 , $object4: object)   //Instance of IPClassification Status  (instead of req - $object3 is used)

    //evaluation phase
    eval (new Integer($object1.getName()) > 5) and
    eval ($object2.getName() == 'Panagiotis Gouvas') and
    eval ($object3.getName() == '213.249.38.66') and
    eval ($object4.getName() == 'Whitelisted') 

then
    System.out.println( "Rule: " + $object1.getName() +" "+$object2.getName()+" "+$object3.getName()+" "+$object4.getName() );
end




/*
rule "Debug-PrintAllClasses"
when
    $clazz: Clazz() 
then
    System.out.println( "Clazz --> "+$clazz  );
end

rule "Debug-PrintAllInstances"
when
    $instanceofclass: InstanceOfClazz() 
then
    System.out.println( "InstanceOfClazz --> "+$instanceofclass  );
end

rule "Debug-PrintAllObjectProperties"
when
    $objectproperty: ObjectProperty() 
then
    System.out.println( "ObjectProperty --> "+$objectproperty  );
end

rule "Debug-PrintAllTriples"
when
    $triple: KnowledgeTriple() 
then
    System.out.println( "KnowledgeTriple --> "+$triple  );
end
*/